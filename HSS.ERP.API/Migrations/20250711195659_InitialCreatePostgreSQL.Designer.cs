// <auto-generated />
using System;
using HSS.ERP.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HSS.ERP.API.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    [Migration("20250711195659_InitialCreatePostgreSQL")]
    partial class InitialCreatePostgreSQL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvoiceManager.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("billing_address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("customer_email");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_name");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_number");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("refund_amount");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerEmail");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "123 Business Ave, Seattle, WA 98101",
                            CreatedAt = new DateTime(2025, 1, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "user1@company.com",
                            CustomerEmail = "billing@contoso.com",
                            CustomerName = "Contoso Corporation",
                            DueDate = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-2025-001",
                            Notes = "Software licensing for Q1 2025",
                            RefundAmount = 0.00m,
                            Status = "Paid",
                            SubTotal = 5000.00m,
                            TaxAmount = 500.00m,
                            TotalAmount = 5500.00m
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "456 Commerce St, Portland, OR 97201",
                            CreatedAt = new DateTime(2025, 1, 28, 14, 30, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "user2@company.com",
                            CustomerEmail = "accounts@adventureworks.com",
                            CustomerName = "Adventure Works",
                            DueDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-2025-002",
                            Notes = "Consulting services - partial refund processed",
                            RefundAmount = 150.00m,
                            Status = "Sent",
                            SubTotal = 2500.00m,
                            TaxAmount = 250.00m,
                            TotalAmount = 2750.00m
                        });
                });

            modelBuilder.Entity("InvoiceManager.Models.InvoiceLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("line_total");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("refund_amount");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("tax_rate");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductCode");

                    b.ToTable("invoice_lines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Microsoft Office 365 Business Premium - 50 licenses",
                            InvoiceId = 1,
                            LineTotal = 1100.00m,
                            ProductCode = "O365-BP",
                            Quantity = 50,
                            RefundAmount = 0.00m,
                            TaxAmount = 110.00m,
                            TaxRate = 10.00m,
                            Unit = "license",
                            UnitPrice = 22.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 10, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Azure Cloud Services - Monthly subscription",
                            InvoiceId = 1,
                            LineTotal = 3900.00m,
                            ProductCode = "AZURE-MONTHLY",
                            Quantity = 1,
                            RefundAmount = 0.00m,
                            TaxAmount = 390.00m,
                            TaxRate = 10.00m,
                            Unit = "month",
                            UnitPrice = 3900.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 28, 14, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Software Development Consulting",
                            InvoiceId = 2,
                            LineTotal = 2500.00m,
                            ProductCode = "CONSULT-DEV",
                            Quantity = 20,
                            RefundAmount = 150.00m,
                            TaxAmount = 250.00m,
                            TaxRate = 10.00m,
                            Unit = "hour",
                            UnitPrice = 125.00m
                        });
                });

            modelBuilder.Entity("InvoiceManager.Models.InvoiceLine", b =>
                {
                    b.HasOne("InvoiceManager.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceManager.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });
#pragma warning restore 612, 618
        }
    }
}
